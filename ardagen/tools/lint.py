"""
Linting and configuration helpers used by default agents.
"""

from __future__ import annotations

from typing import Any, Mapping

from ..domain import (
    LintResults,
    MicroArchConfig,
    QuantConfig,
    RTLConfig,
    SpecContract,
)
from ..workspace import workspace_manager


def build_spec_contract(context: Mapping[str, Any]) -> SpecContract:
    workspace = _get_workspace(context.get("workspace_token"))
    metadata = workspace.get_metadata() if workspace else {}
    algorithm_name = metadata.get("name") or "AlgorithmBundle"

    _emit_tool_event(context, "spec", "spec-generator", {"algorithm": algorithm_name})

    return SpecContract(
        name=algorithm_name,
        description=f"Autogenerated specification for {algorithm_name}.",
        clock_mhz_target=200.0,
        throughput_samples_per_cycle=1,
        input_format={"width": 16, "fractional_bits": 8},
        output_format={"width": 16, "fractional_bits": 8},
        resource_budget={"lut": 15000, "ff": 30000, "dsp": 96, "bram": 120},
        verification_config={"num_samples": 128},
    )


def build_quant_config(context: Mapping[str, Any]) -> QuantConfig:
    prior = context.get("prior_results", {})
    spec_data = prior.get("spec", {})
    input_width = spec_data.get("input_format", {}).get("width", 16)
    output_width = spec_data.get("output_format", {}).get("width", 16)

    _emit_tool_event(context, "quant", "quantizer", {"input_width": input_width, "output_width": output_width})

    return QuantConfig(
        fixed_point_config={
            "input_width": input_width,
            "input_frac": max(input_width - 4, 8),
            "output_width": output_width,
            "output_frac": max(output_width - 4, 8),
        },
        error_metrics={
            "max_abs_error": 1e-3,
            "rms_error": 5e-4,
        },
        quantized_coefficients=[0.1, 0.2, 0.3],
        fxp_model_path="workspace/quant_model.py",
        confidence=85.0,
    )


def build_microarch_config(context: Mapping[str, Any]) -> MicroArchConfig:
    _emit_tool_event(context, "microarch", "microarch-synthesizer", {"policy": "autoschedule"})
    return MicroArchConfig(
        pipeline_depth=4,
        unroll_factor=2,
        memory_config={"buffer_depth": 16, "banking": "dual"},
        dsp_usage_estimate=32,
        estimated_latency_cycles=12,
        handshake_protocol="ready_valid",
        confidence=85.0,
    )


def build_rtl_config(context: Mapping[str, Any]) -> RTLConfig:
    _emit_tool_event(context, "rtl", "rtl-generator", {"backend": "template"})
    
    # Write RTL files to workspace using the same mechanism as OpenAI agents
    workspace_token = context.get("workspace_token")
    if workspace_token:
        from ..agents.tools import write_artifact
        
        # Write top-level module
        top_content = """module algorithm_top (
    input  wire        clk,
    input  wire        rst_n,
    input  wire [15:0] data_in,
    input  wire        valid_in,
    output reg  [15:0] data_out,
    output reg         valid_out
);

    algorithm_core u_core (
        .clk(clk),
        .rst_n(rst_n),
        .data_in(data_in),
        .valid_in(valid_in),
        .data_out(data_out),
        .valid_out(valid_out)
    );

endmodule
"""
        write_artifact(workspace_token, "rtl/algorithm_top.sv", top_content)
        
        # Write core module
        core_content = """module algorithm_core (
    input  wire        clk,
    input  wire        rst_n,
    input  wire [15:0] data_in,
    input  wire        valid_in,
    output reg  [15:0] data_out,
    output reg         valid_out
);

    // Simple passthrough implementation
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            data_out <= 16'h0;
            valid_out <= 1'b0;
        end else begin
            data_out <= data_in;
            valid_out <= valid_in;
        end
    end

endmodule
"""
        write_artifact(workspace_token, "rtl/algorithm_core.sv", core_content)
        
        # Write parameters file
        params_content = """// System parameters
`define DATA_WIDTH 16
`define CLOCK_FREQ 200_000_000
"""
        write_artifact(workspace_token, "rtl/params.svh", params_content)
    
    return RTLConfig(
        rtl_files=[
            "rtl/algorithm_top.sv",
            "rtl/algorithm_core.sv",
        ],
        params_file="rtl/params.svh",
        top_module="algorithm_top",
        lint_passed=True,
        estimated_resources={"lut": 4000, "ff": 8000, "dsp": 24},
        confidence=80.0,
    )


def run_static_checks(context: Mapping[str, Any]) -> LintResults:
    _emit_tool_event(context, "static_checks", "lint-runner", {"ruleset": "default"})
    return LintResults(
        syntax_errors=0,
        style_warnings=1,
        lint_violations=0,
        critical_issues=0,
        issues_list=[],
        overall_score=95.0,
        lint_clean=True,
        confidence=85.0,
    )


def _emit_tool_event(context: Mapping[str, Any], stage: str, tool_name: str, metadata: Mapping[str, Any]) -> None:
    observability = context.get("observability")
    if observability is not None:
        try:
            observability.tool_invoked(stage, tool_name, dict(metadata))
        except Exception:
            pass


def _get_workspace(token: Any):
    if not token:
        return None
    try:
        return workspace_manager.get_workspace(str(token))
    except Exception:
        return None
