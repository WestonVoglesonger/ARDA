/* params.svh - autogenerated parameters and typedefs for FFT/complex multiply core */
`ifndef RTL_PARAMS_SVH
`define RTL_PARAMS_SVH

// Fixed-point and data width parameters (from quant.fixed_point_config)
parameter int COEFF_WIDTH      = 16; // coeff total width (signed)
parameter int COEFF_FRAC      = 13; // coeff fractional bits (Q1.13)
parameter int DATA_WIDTH       = 16; // input data total width (signed)
parameter int DATA_FRAC       = 12; // input fractional bits (Q1.12)
parameter int OUTPUT_WIDTH    = 18; // output data total width (signed)
parameter int OUTPUT_FRAC     = 14; // output fractional bits (Q1.14)
parameter int ACC_WIDTH       = 32; // accumulator width for multiplications
parameter int PIPELINE_DEPTH  = 16; // pipeline / fifo depth (from microarch.pipeline_depth)

// Derived parameters
parameter int COEFF_COUNT = 8; // number of complex twiddle pairs provided in quantized_coefficients

// Type definitions
typedef logic                    logic_t;
typedef logic [DATA_WIDTH-1:0]  data_t;
typedef logic [COEFF_WIDTH-1:0] coeff_t;
typedef logic [OUTPUT_WIDTH-1:0] out_t;

typedef struct packed {
  coeff_t real;
  coeff_t imag;
} coeff_complex_t;

// Twiddle coefficient ROM (complex) - values taken from quant.quantized_coefficients
// Each coefficient pair is in signed Q(?,13) format (coeff_frac = 13). Real/Imag pairs:
// [8192.0, 0.0], [8190.0, -202.0], [8182.0, -402.0], [8173.0, -604.0]
// Stored as signed 16-bit two's complement constants

localparam coeff_complex_t TWIDDLE_ROM [0:COEFF_COUNT-1] = '{
  '{real: 16'sd8192, imag: 16'sd0},
  '{real: 16'sd8190, imag: -16'sd202},
  '{real: 16'sd8182, imag: -16'sd402},
  '{real: 16'sd8173, imag: -16'sd604},
  // Duplicate / mirror to fill 8 entries to match provided list length
  '{real: 16'sd8192, imag: 16'sd0},
  '{real: 16'sd8190, imag: -16'sd202},
  '{real: 16'sd8182, imag: -16'sd402},
  '{real: 16'sd8173, imag: -16'sd604}
};

`endif // RTL_PARAMS_SVH
